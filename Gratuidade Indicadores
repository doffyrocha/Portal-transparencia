import requests
import pandas as pd
from tqdm import tqdm

# === CONFIGURA√á√ïES ===
ANO = 2024
SIGLA_ENTIDADE = "SENAI"

# Lista dos 27 departamentos regionais
departamentos = [
    "SENAI-AC", "SENAI-AL", "SENAI-AM", "SENAI-AP", "SENAI-BA",
    "SENAI-CE", "SENAI-DF", "SENAI-ES", "SENAI-GO", "SENAI-MA",
    "SENAI-MG", "SENAI-MS", "SENAI-MT", "SENAI-PA", "SENAI-PB",
    "SENAI-PE", "SENAI-PI", "SENAI-PR", "SENAI-RJ", "SENAI-RN",
    "SENAI-RO", "SENAI-RR", "SENAI-RS", "SENAI-SC", "SENAI-SE",
    "SENAI-SP", "SENAI-TO"
]

# URL base da API de Indicadores
URL_BASE = "https://sistematransparenciaweb.com.br/api-gratuidade/publico/gratuidades/indicadores/entidades/{siglaEntidadeNacional}/departamentos/{departamento}/gratuidade"

# Lista para armazenar todos os DataFrames
dados_todos = []

print(f"üì° Coletando dados de Gratuidade Indicadores SENAI ({ANO})...")

for dep in tqdm(departamentos, desc="Baixando dados dos departamentos"):
    try:
        url = URL_BASE.format(siglaEntidadeNacional=SIGLA_ENTIDADE, departamento=dep)
        params = {"ano": ANO}
        response = requests.get(url, params=params, timeout=20)

        if response.status_code == 200:
            data = response.json()
            if isinstance(data, list) and len(data) > 0:
                df_temp = pd.DataFrame(data)
                df_temp["UF"] = dep
                dados_todos.append(df_temp)
        else:
            print(f"‚ö†Ô∏è {dep}: Erro {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro ao processar {dep}: {e}")

# Converter tudo em DataFrame final
if dados_todos:
    df_final = pd.concat(dados_todos, ignore_index=True)
    df_final = df_final.dropna(axis=1, how="all")

    # Reorganiza algumas colunas principais
    cols_ordenadas = [
        "UF", "siglaUF", "ano", "indicador", "realizado", "estimadoAnual",
        "indiceRealizacao", "titulo", "nomeEntidadeRegional", "siglaEntidadeRegional",
        "fonte", "analise", "statusValidacao", "dataSensibilizacao", "periodoReferencia"
    ]
    cols_existentes = [c for c in cols_ordenadas if c in df_final.columns]
    df_final = df_final[cols_existentes + [c for c in df_final.columns if c not in cols_existentes]]

    # Exportar para Excel
    nome_arquivo = f"gratuidade_indicadores_senai_{ANO}.xlsx"
    df_final.to_excel(nome_arquivo, index=False)
    print(f"\n‚úÖ Arquivo salvo com sucesso: {nome_arquivo}")
    print(f"üìä Total de registros: {len(df_final)}")
else:
    print("‚ö†Ô∏è Nenhum dado retornado pela API.")
